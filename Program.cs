using System;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Converters;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Helpers;
using Telegram.Bot.Requests;
using Telegram.Bot.Requests.Abstractions;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.InlineQueryResults;
using Telegram.Bot.Types.InputFiles;
using Telegram.Bot.Types.Passport;
using Telegram.Bot.Types.Payments;
using Telegram.Bot.Types.ReplyMarkups;
using Telegram.Bot.Extensions.Polling;
using System.Threading;
using System.Threading.Tasks;
using System.Collections;

// 
//      –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –ö–û–î–ï
// 

var botClient = new TelegramBotClient("hidden");

var me = await botClient.GetMeAsync();

var _start = new ReplyKeyboardMarkup(
    new KeyboardButton[][]
    {
        new KeyboardButton[] {"Message ‚úçÔ∏è", "Sticker üóΩ", "Image üåÖ"},
        new KeyboardButton[] {"Audio üéß", "Voice üéô"},
        new KeyboardButton[] {"Video üéû", "Video Note üìπ"},
        new KeyboardButton[] {"Album"},
        new KeyboardButton[] {"Document üìÑ", "GIF"},
        new KeyboardButton[] {"Poll üìä", "Interview"}
    }
)
{
    ResizeKeyboard = true
};

using var cts = new CancellationTokenSource();

// 
//      –ù–ê–ß–ò–ù–ê–ï–ú –†–ê–ë–û–¢–£ –ë–û–¢–ê
// 

botClient.StartReceiving(new DefaultUpdateHandler(HandleUpdateAsync, HandleErrorAsync), cts.Token);

Console.WriteLine($"Start listening for @{me.Username}");

// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
Console.ReadLine();
cts.Cancel();


// 
//      –ú–ï–¢–û–î–´
// 

Task HandleErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
{
    var ErrorMessage = exception switch
    {
        ApiRequestException apiRequestException => $"Telegram API Error:\n[{apiRequestException.ErrorCode}]\n{apiRequestException.Message}",
        _                                       => exception.ToString()
    };

    Console.WriteLine(ErrorMessage);
    return Task.CompletedTask;
}

async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
{
    if (update.Type != UpdateType.Message)
        return;
    if (update.Message.Type != MessageType.Text)
        return;

    var chatId = update.Message.Chat.Id;
    
    Console.WriteLine($"Received a '{update.Message.Text}' message in chat {chatId}.");

    switch (update.Message.Text)
    {
        case "/start":
            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: "*HEY!* ü§ô\n\n –ü—Ä–∏–≤–µ—Ç—Å–≤—É—é —Ç–µ–±—è, –º–æ–π –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –≤ —Å–≤–æ—ë–º —Ç–µ—Å—Ç–æ–≤–æ–º –±–æ—Ç–µ ü§™, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ç–µ–±—è. üòè \n\n –°–µ–π—á–∞—Å —É —Ç–µ–±—è —Å–Ω–∏–∑—É üëá –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏. –í—ã–±–∏—Ä–∏ —Ç–æ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å, —Ç–µ–º —Å–∞–º—ã–º –ø–æ—Å–º–æ—Ç—Ä–µ–≤ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞!\n\n _P.S. –µ—Å–ª–∏ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ -- –æ—Ç–ø—Ä–∞–≤–ª—è–π /start_",
                parseMode: ParseMode.Markdown,
                replyToMessageId: update.Message.MessageId,
                replyMarkup: _start
            );
            break;

        case "Message ‚úçÔ∏è":
            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: "–ù—É –∞ —á—Ç–æ —Ç—ã –µ—â–µ –æ–∂–∏–¥–∞–ª –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è))",
                replyMarkup: new ReplyKeyboardMarkup ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            );
            break;

        case "Sticker üóΩ":
            await botClient.SendStickerAsync(
                chatId: chatId,
                sticker: "https://github.com/TelegramBots/book/raw/master/src/docs/sticker-fred.webp",
                replyMarkup: new ReplyKeyboardMarkup ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            );
            break;

        case "Image üåÖ":
            await botClient.SendPhotoAsync(
                chatId: chatId,
                photo: System.IO.File.OpenRead("src/photo.jpg"),
                caption: "–≠—Ç–æ —è. –°–∫–∞–∂–∏, –∫—Ä–∞—Å–∏–≤—ã–π?))",
                replyMarkup: new ReplyKeyboardMarkup ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            );
            break;

        case "Audio üéß":
            await botClient.SendAudioAsync(
                chatId: chatId,
                audio: System.IO.File.OpenRead("src/01 - River.mp3"),
                caption: "–ö—Ä—É—Ç–∞—è –ø–µ—Å–Ω—è",
                replyMarkup: new ReplyKeyboardMarkup ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            );
            break;

        case "Voice üéô":
            await botClient.SendVoiceAsync(
                chatId: chatId,
                voice: System.IO.File.OpenRead("src/Record.ogg"),
                replyMarkup: new ReplyKeyboardMarkup ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                duration: 10
            );
            break;

        case "Video üéû":
            await botClient.SendVideoAsync(
                chatId: chatId,
                video: System.IO.File.OpenRead("src/video.mp4"),
                replyMarkup: new ReplyKeyboardMarkup ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            );
            break;

        case "Video Note üìπ":
            await botClient.SendVideoNoteAsync(
                chatId: chatId,
                videoNote: System.IO.File.OpenRead("src/note.mp4"),
                length: 360,
                replyMarkup: new ReplyKeyboardMarkup ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            );
            break;

        case "Album":
            await botClient.SendMediaGroupAsync(
                chatId: chatId,
                media: new IAlbumInputMedia[]
                {
                    new InputMediaPhoto("https://cdn.pixabay.com/photo/2017/06/20/19/22/fuchs-2424369_640.jpg"),
                    new InputMediaPhoto("https://cdn.pixabay.com/photo/2017/04/11/21/34/giraffe-2222908_640.jpg")
                }
            );
            break;

        case "Document üìÑ":
            InputOnlineFile inputOnlineFile = new InputOnlineFile(System.IO.File.OpenRead("src/text.txt"), "text.txt");
            await botClient.SendDocumentAsync(
                chatId: chatId,
                document: inputOnlineFile,
                replyMarkup: new ReplyKeyboardMarkup ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            );
            break;

        case "GIF":
            await botClient.SendAnimationAsync(
                chatId: chatId,
                animation: "https://raw.githubusercontent.com/TelegramBots/book/master/src/docs/video-waves.mp4",
                replyMarkup: new ReplyKeyboardMarkup ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            );
            break;

        case "Poll üìä":
            await botClient.SendPollAsync(
                chatId: chatId,
                question: "–Ø –¥–æ–ª–≥–æ –ø–∏—Å–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞?",
                options: new []
                {
                    "<2","2<x<4", ">4"
                },
                correctOptionId: 1,
                replyMarkup: new ReplyKeyboardMarkup ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            );
            break;
        
        case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: "–í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ",
                parseMode: ParseMode.Markdown,
                replyToMessageId: update.Message.MessageId,
                replyMarkup: _start
            );
            break;

        case "Interview":
            await botClient.SendVideoAsync(
                chatId: chatId,
                video: System.IO.File.OpenRead("src/inter.mp4"),
                replyMarkup: new ReplyKeyboardMarkup ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            );
            break;

        default:
            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: "–ü—Ä–æ—Å—Ç–∏, –≤ –±–æ—Ç–µ –µ—â–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è. –≠—Ç–æ –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ, —Ç–∞–∫ —á—Ç–æ –∏–∑–≤–∏–Ω—è–π! –í—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ",
                replyMarkup: _start
            );
            break;
    }
}
